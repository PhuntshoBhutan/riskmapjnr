# -*- mode: org -*-
# -*- coding: utf-8 -*-
# ==============================================================================
# author          :Ghislain Vieilledent
# email           :ghislain.vieilledent@cirad.fr, ghislainv@gmail.com
# web             :https://ecology.ghislainv.fr
# license         :GPLv3
# ==============================================================================

#+title: Using the =riskmapjnr= Python module to map the deforestation risk following the JNR methodology
#+subtitle: @@latex:\textcolor{pnasblue}{Second report for FAO focused on Kenya\\ FAO budget code: TF/NFODD/TFGB110021450}@@
#+author: Ghislain Vieilledent^{\ast, \ddag}
#+email: ghislain.vieilledent@cirad.fr
#+date: @@latex:\today@@

#+LANGUAGE: en
#+TAGS: Blog(B) noexport(n) ignore(i) Stats(S)
#+TAGS: Ecology(E) R(R) OrgMode(O) Python(P)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS: H:2 num:t toc:nil ^:{} author:t date:t title:t
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: [paper=a4, 12pt, DIV=12]
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{bookmark}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \definecolor{pnasblue}{RGB}{0,101,165}
#+LATEX_HEADER: \hypersetup{colorlinks=true, allcolors=pnasblue}
#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}

#+BIBLIOGRAPHY: biblio/biblio.bib
#+CITE_EXPORT: csl ecology.csl

#+PROPERTY: header-args :eval never-export

* Version information    :noexport:

#+begin_src emacs-lisp -n :exports both
(princ (concat
        (format "Emacs version: %s\n"
                (emacs-version))
        (format "org version: %s\n"
                (org-version))))        
#+end_src

#+RESULTS:
: Emacs version: GNU Emacs 27.1 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.30, cairo version 1.16.0)
:  of 2021-11-27, modified by Debian
: org version: 9.5.3

* First page                                                         :ignore:

#+begin_export latex
\vspace{-1cm}
\begin{center}
  $\ast$ \textbf{Correspondence to:}~ghislain.vieilledent@cirad.fr \\
  $\ddag$ \textbf{CIRAD}, UMR AMAP, F-34398 Montpellier, FRANCE \\
\end{center}
\vspace{0.25cm}
#+end_export

* Abstract                                                           :ignore:

#+begin_abstract
The JNR (Jurisdictional Nested REDD+) provides a standardized approach to estimate and credit greenhouse gas (GHG) emission reductions in the framework of REDD+ (Reducing Emissions from Deforestation and Forest Degradation) programs. The JNR approach relies on a map of the deforestation risk to be able to allocate the deforestation spatially within the jurisdiction when projecting future deforestation under the reference scenario. The JNR Risk Mapping Tool presents a standardized approach to obtain this map of the deforestation risk. The methodology is based on minimal spatial information provided by the past deforestation map at the jurisdictional scale. While the methodology favors simplicity, the approach requires several computationally intensive geoprocessing steps on potentially large raster files. The =riskmapjnr= Python package we developed provides easy-to-use functions to obtain the risk map following the JNR methodology. Functions use optimized Python code that can efficiently process large raster files without memory issues. Here we provide an example of the use of the =riskmapjnr= Python package for Kenya. *The package is still under development. The code might include some errors and still need to be thoroughly tested*. A first stable version (v1.0) of the package will be released at the end of the year 2022. As a consequence, *these preliminary results should be interpreted with caution*.
#+end_abstract

#+begin_export latex
\vspace{0.25cm}
\begin{center}
\includegraphics[width=0.86\textwidth]{images/partners_logos.png}\enlargethispage{2\baselineskip}
\end{center}
\newpage
\tableofcontents
\newpage
\listoffigures
\newpage
#+end_export

* Introduction

** Context

In the forest sector, programs to mitigate GHG emissions across entire national or subnational jurisdictions (called [[https://redd.unfccc.int/][REDD+]] programs, i.e. programs aiming at Reducing Emissions from Deforestation and Forest Degradation) can be accounted for and credited using a jurisdictional-scale framework called [[https://verra.org/project/jurisdictional-and-nested-redd-framework/][JNR]] (Jurisdictional and Nested REDD+). JNR integrates government-led and project-level REDD+ activities and establishes a clear pathway for subnational- and project-level activities to be incorporated within broader REDD+ programs. The JNR framework ensures all projects and other reducing emissions from deforestation and degradation activities in a given jurisdiction are developed using consistent baselines and crediting approaches. They mitigate the risk of "leakage", i.e. the displacement of emission-causing activities to areas outside the project boundary, by monitoring emissions across an entire jurisdictional area. JNR is part of the [[https://verra.org/project/vcs-program/][VCS]] (Verified Carbon Standard) program which allows certified projects to turn their greenhouse gas (GHG) emission reductions and removals into tradable carbon credits. Since its launch in 2006, the VCS program has grown into the world's largest voluntary GHG program.

The [[https://verra.org/wp-content/uploads/2021/04/DRAFT_JNR_Risk_Mapping_Tool_15APR2021.pdf][JNR Risk Mapping Tool]] is a "benchmark" methodology that provides a standardized approach for developing deforestation and forest degradation risk maps for users of the [[https://verra.org/wp-content/uploads/2021/04/JNR_Allocation_Tool_Guidance_v4.0.pdf][JNR Allocation Tool]] in the context of JNR requirements. The methodology allows deriving a map of the deforestation (or degradation) risk based on a minimal spatial information provided by the past deforestation (or degradation) map at the jurisdictional scale. The [[https://verra.org/wp-content/uploads/2021/04/DRAFT_JNR_Risk_Mapping_Tool_15APR2021.pdf][JNR Risk Mapping Tool]] allows the creation of categorical and spatially static maps whose categories represent different levels of risk of deforestation or forest degradation in the validity period of the Forest Reference Emissions Level (FREL) and throughout the jurisdictional geographical boundaries. In the [[https://verra.org/wp-content/uploads/2021/04/JNR_Allocation_Tool_Guidance_v4.0.pdf][JNR Allocation Tool]], the level of risk determines how the jurisdictional FREL is spatially distributed to nested lower-level jurisdictional programs and projects.

** Objectives

While the [[https://verra.org/wp-content/uploads/2021/04/DRAFT_JNR_Risk_Mapping_Tool_15APR2021.pdf][JNR Risk Mapping Tool]] methodology favors simplicity, obtaining the risk map is not straightforward. The approach requires several geoprocessing steps on raster data that can be large, i.e. covering large spatial extent (eg. national scale) at high spatial resolution (eg. 30 m). The =riskmapjnr= Python package we developed includes functions to perform these geoprocessing steps and derive a risk map on any jurisdiction and at any spatial resolution following the [[https://verra.org/wp-content/uploads/2021/04/DRAFT_JNR_Risk_Mapping_Tool_15APR2021.pdf][JNR Risk Mapping Tool]] methodology. The =riskmapjnr= package includes functions to:

1. Estimate the distance to forest edge beyond which the deforestation risk is negligible: =dist_edge_threshold()=.
2. Compute local deforestation rates using a moving window whose size can vary: =local_defor_rate()=.
3. Transform local deforestation rates into categories of deforestation risks using several slicing algorithms: =set_defor_cat_zero()= and =defor_cat()=
4. Validate maps of deforestation risk and select the map with the higher accuracy: =defrate_per_cat()= and =validation()=.

The =riskmapjnr= package uses several known Python scientific packages such as =NumPy=, =SciPy=, and =Pandas= for fast matrix and vector operations and =gdal= for processing georeferenced raster data. Raster data are divided into blocks of data for in-memory processing. Such an approach allow processing large raster files with large geographical extents (e.g. country scale) and high spatial resolutions (eg. 30 m). Here we present an example of the use of the =riskmapjnr= Python package for Kenya following all the steps of the JNR methodology.

** Warnings

The =riskmapjnr=  package is still under development. The code might include some errors and still need to be thoroughly tested. A first stable version (v1.0) of the package will be released at the end of the year 2022. As a consequence, the preliminary results presented here should be interpreted with caution. Moreover, the JNR methodology is currently discussed and will be subject to changes in the coming months. Future versions of the =riskmapjnr= package should integrate these changes.

* Initial setup and data

** Installation

You need several dependencies to run the =riskmapjnr= Python package. The best way to install the package is to create a Python virtual environment, either through =conda= (recommended) or =virtualenv=.

*** Using =conda= (recommended)

You first need to have =miniconda3= installed (see [[https://docs.conda.io/en/latest/miniconda.html][miniconda instructions]]). Then, create a conda environment (see [[https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html][conda environment instructions]]) and install the =riskmapjnr= package with the following commands:

#+begin_src shell
conda create --name conda-rmj -c conda-forge python=3 gdal numpy matplotlib pandas pip scipy --yes
conda activate conda-rmj
pip install riskmapjnr # For PyPI version
# pip install https://github.com/ghislainv/riskmapjnr/archive/master.zip # For GitHub dev version
# conda install -c conda-forge jupyter geopandas descartes folium --yes  # Optional additional packages
#+end_src

To deactivate and delete the conda environment:

#+begin_src shell
conda deactivate
conda env remove --name conda-rmj
#+end_src

*** Using =virtualenv=

You first need to have the =virtualenv= package installed (see [[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/][virtualenv instructions]]). Then, create a virtual environment and install the =riskmapjnr= package with the following commands:

#+begin_src shell
cd ~
mkdir venvs # Directory for virtual environments
cd venvs
virtualenv --python=/usr/bin/python3 venv-rmj
source ~/venvs/venv-rmj/bin/activate
# Install numpy first
pip install numpy
# Install gdal (the correct version) 
pip install --global-option=build_ext --global-option="-I/usr/include/gdal" gdal==$(gdal-config --version)
pip install riskmapjnr # For PyPI version, this will install all other dependencies
# pip install https://github.com/ghislainv/riskmapjnr/archive/master.zip # For GitHub dev version
pip install jupyter geopandas descartes folium # Optional additional packages
#+end_src

To deactivate and delete the virtual environment:

#+begin_src shell
deactivate
rm -R ~/venvs/venv-rmj # Just remove the repository
#+end_src

*** Installation testing

You can test that the package has been correctly installed using the command =riskmapjnr= in a terminal:

#+begin_src shell
riskmapjnr
#+end_src

This should return a short description of the =riskmapjnr= package and the version number:

#+begin_src shell
# riskmapjnr: Map of deforestation risk following JNR methodology.
# https://ecology.ghislainv.fr/riskmapjnr/
# riskmapjnr version x.x.
#+end_src

You can also test the package executing the commands in the [[https://ecology.ghislainv.fr/riskmapjnr/notebooks/get_started.html][Get started]] tutorial of the [[https://ecology.ghislainv.fr/riskmapjnr][=riskmapjnr= website]].

** Importing Python modules

We import the Python modules needed for running the analysis.

#+begin_src python :results output :session :exports both
# Imports
import os
import multiprocessing as mp
import pkg_resources

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from tabulate import tabulate

import riskmapjnr as rmj
#+end_src

#+RESULTS:

Increase the cache for GDAL to increase computational speed.

#+begin_src python :results output :session :exports both
# GDAL
os.environ["GDAL_CACHEMAX"] = "1024"
#+end_src

#+RESULTS:

Set the =PROJ_LIB= environmental variable.

#+begin_src python :results output :session :exports both
os.environ["PROJ_LIB"] = os.path.join(
    "/home/ghislain/.pyenv/versions/miniconda3-latest/",
    "envs/conda-rmj/share/proj")
#+end_src

#+RESULTS:

Create a directory to save the results.

#+begin_src python :results output :session :exports both
out_dir = "outputs_kenya"
rmj.make_dir(out_dir)
#+end_src

#+RESULTS:

** Forest cover change data

We consider a recent map of forest cover change for Kenya. The raster file (=fcc123_KEN_101418.tif=) includes the following values: *1* for deforestation on the period 2010--2014, *2* for deforestation on the period 2014--2018, and *3* for the remaining forest in 2018. NoData value is set to *0*. The first period (2010--2014) will be used for calibration and the second period (2014--2018) will be used for validation. We also have access to a vector file of Kenya borders (=ctry_border_KEN.gpkg=) that will be used for mapping. 

#+begin_src python :results output :session :exports both
fcc_file = "data/fcc123_KEN_101418.tif"
print(fcc_file)
border_file = "data/ctry_border_KEN.gpkg"
print(border_file)
#+end_src

#+RESULTS:
: data/fcc123_KEN_101418.tif
: data/ctry_border_KEN.gpkg

We plot the forest cover change map with the =plot.fcc123()= function.

#+begin_src python :results file :session :exports both
ofile = os.path.join(out_dir, "fcc123.png")
fig_fcc123 = rmj.plot.fcc123(
    input_fcc_raster=fcc_file,
    maxpixels=1e8,
    output_file=ofile,
    borders=border_file,
    linewidth=0.2,
    figsize=(5, 4), dpi=800)
ofile
#+end_src

#+NAME: fig:kenya-fccmap
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Forest cover change map.* Deforestation on the first period (2010--2014) is in orange, deforestation on the second period (2014--2018) is in red and remaining forest (in 2018) is in green.
#+RESULTS:
[[file:outputs_kenya/fcc123.png]]

* Deriving the deforestation risk map
 
We derive the deforestation risk map using the =makemap()= function. This function calls a sequence of functions from the =riskmapjnr= package which perform all the steps detailed in the JNR methodology. These steps are described in the first report for FAO and in the [[https://ecology.ghislainv.fr/riskmapjnr/notebooks/steps.html][/All steps/ tutorial]] on the =riskmapjnr= website. We use parallel computing with several CPUs.

#+begin_src python :results output :session :exports both
ncpu = mp.cpu_count() - 2
print(f"Number of CPUs: {ncpu}.") 
#+end_src

#+RESULTS:
: Number of CPUs: 6.
 
#+begin_src python :results output :session :exports code
start_time = time.time()
results_makemap = rmj.makemap(
    fcc_file=fcc_file,
    time_interval=[4, 4],
    output_dir=out_dir,
    clean=False,
    dist_bins=np.arange(0, 1080, step=30),
    win_sizes=np.arange(5, 200, 16),
    ncat=30,
    parallel=True,
    ncpu=ncpu,
    methods=["Equal Interval", "Equal Area"],
    csize=400,  # 12 km
    no_quantity_error=True,
    figsize=(6.4, 4.8),
    dpi=100,
    blk_rows=200,
    verbose=True)
sec_seq = time.time() - start_time
#+end_src

#+RESULTS:

#+begin_src python :results output :session :exports both
print('Computation time:', time.strftime("%H:%M:%S",time.gmtime(sec_seq)))
#+end_src

#+RESULTS:
: Computation time: 00:38:44

* Results

** Deforestation risk and distance to forest edge

We obtain the threshold for the distance to forest edge beyond which the deforestation risk is negligible.

#+begin_src python :results output :session :exports both
dist_thresh = results_makemap["dist_thresh"]
print(f"The distance theshold is {dist_thresh} m.")
#+end_src

#+RESULTS:
: The distance theshold is 780 m.

We have access to a table indicating the cumulative percentage of deforestation as a function of the distance to forest edge.

#+begin_src python :results value raw :session :exports results
perc_df = pd.read_csv(os.path.join(out_dir, "perc_dist.csv"), na_filter=False)
col_names = ["Distance", "Npixels", "Area", "Cumulation", "Percentage"]
tabulate(perc_df.head(30), headers=col_names, tablefmt="orgtbl", showindex=False)
#+end_src

#+RESULTS:
| Distance |     Npixels |        Area |  Cumulation | Percentage |
|----------+-------------+-------------+-------------+------------|
|       30 |  1.4005e+07 | 1.26045e+06 | 1.26045e+06 |    48.9547 |
|       60 | 5.35311e+06 |      481780 | 1.74223e+06 |    67.6666 |
|       90 | 3.02736e+06 |      272463 | 2.01469e+06 |    78.2489 |
|      120 | 1.49449e+06 |      134504 |  2.1492e+06 |    83.4729 |
|      150 | 1.17144e+06 |      105430 | 2.25463e+06 |    87.5677 |
|      180 |      639743 |     57576.9 |  2.3122e+06 |    89.8039 |
|      210 |      469736 |     42276.2 | 2.35448e+06 |    91.4459 |
|      240 |      417499 |     37574.9 | 2.39205e+06 |    92.9053 |
|      270 |      326224 |     29360.2 | 2.42141e+06 |    94.0456 |
|      300 |      260730 |     23465.7 | 2.44488e+06 |     94.957 |
|      330 |      179341 |     16140.7 | 2.46102e+06 |    95.5839 |
|      360 |      147688 |     13291.9 | 2.47431e+06 |    96.1001 |
|      390 |      153559 |     13820.3 | 2.48813e+06 |    96.6369 |
|      420 |      109451 |     9850.59 | 2.49798e+06 |    97.0195 |
|      450 |       98440 |      8859.6 | 2.50684e+06 |    97.3636 |
|      480 |       72145 |     6493.05 | 2.51334e+06 |    97.6158 |
|      510 |       70682 |     6361.38 |  2.5197e+06 |    97.8628 |
|      540 |       58834 |     5295.06 | 2.52499e+06 |    98.0685 |
|      570 |       53707 |     4833.63 | 2.52983e+06 |    98.2562 |
|      600 |       47735 |     4296.15 | 2.53412e+06 |    98.4231 |
|      630 |       36436 |     3279.24 |  2.5374e+06 |    98.5504 |
|      660 |       38346 |     3451.14 | 2.54085e+06 |    98.6845 |
|      690 |       30219 |     2719.71 | 2.54357e+06 |    98.7901 |
|      720 |       26853 |     2416.77 | 2.54599e+06 |     98.884 |
|      750 |       27575 |     2481.75 | 2.54847e+06 |    98.9804 |
|      780 |       22398 |     2015.82 | 2.55049e+06 |    99.0586 |
|      810 |       20402 |     1836.18 | 2.55232e+06 |      99.13 |
|      840 |       17439 |     1569.51 | 2.55389e+06 |    99.1909 |
|      870 |       16532 |     1487.88 | 2.55538e+06 |    99.2487 |
|      900 |       17080 |      1537.2 | 2.55692e+06 |    99.3084 |

We also have access to a plot showing how the cumulative percentage of deforestation increases with the distance to forest edge.

#+begin_src python :results file :session :exports both
os.path.join(out_dir, "perc_dist.png")
#+end_src

#+NAME: fig:kenya-perc_dist
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Identifying areas for which the risk of deforestation is negligible.* Figure shows that more than 99% of the deforestation occurs within a distance from the forest edge $\leq$ 180 m. Forest areas located at a distance > 180 m from the forest edge can be considered as having no risk of being deforested.
#+RESULTS:
[[file:outputs_kenya/perc_dist.png]]

** Model comparison

We can plot the change in wRMSE value with both the window size and slicing algorithm. It seems that the "Equal Interval" (ei) algorithm provides lower wRMSE values. The lowest wRMSE value is obtained for a window size between 25 and 50 pixels.

#+begin_src python :results file :session :exports both
os.path.join(out_dir, "map_comp.png")
#+end_src

#+NAME: fig:kenya-map_comp
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Change in wRMSE values as a function of both window size and slicing algorithm*. "ei" is the "Equal Interval" algorithm and "ea" is the "Equal Area" algorithm.
#+RESULTS:
[[file:outputs_kenya/map_comp.png]]

We identify the moving window size and the slicing algorithm of the best model. The best moving window is 37 pixel size, corresponding to 1.110 km.

#+begin_src python :results output :session :exports both
ws_hat = results_makemap["ws_hat"]
m_hat = results_makemap["m_hat"]
print(f"The best moving window size is {ws_hat} pixels.")
print(f"The best slicing algorithm is '{m_hat}'.")
#+end_src

#+RESULTS:
: The best moving window size is 37 pixels.
: The best slicing algorithm is 'ei'.

** Model performance

We can look at the relationship between observed and predicted deforestation in 1 x 1 km grid cells for the best model.

#+begin_src python :results file :session :exports both
os.path.join(out_dir, f"pred_obs_ws{ws_hat}_{m_hat}.png")
#+end_src

#+NAME: fig:kenya-pred_obs
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Relationship between observed and predicted deforestation in 1 x 1 km grid cells for the best model*. The red line is the identity line. Values of the weighted root mean squared error (wRMSE, in ha) and of the number of observations ($n$, the number of spatial cells) are reported on the graph.
#+RESULTS:
[[file:outputs_kenya/pred_obs_ws37_ei.png]]

** Risk map of deforestation

We plot the risk map using the =plot.riskmap()= function.

#+begin_src python :results file :session :exports both
ifile = os.path.join(out_dir, f"riskmap_ws{ws_hat}_{m_hat}.tif")
ofile = os.path.join(out_dir, f"riskmap_ws{ws_hat}_{m_hat}.png")
riskmap_fig = rmj.plot.riskmap(
    input_risk_map=ifile,
    maxpixels=1e8,
    output_file=ofile,
    borders=border_file,
    legend=True,
    figsize=(5, 4), dpi=800, linewidth=0.2)
ofile
#+end_src

#+NAME: fig:kenya-riskmap
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Map of the deforestation risk following the JNR methodology*. Forest pixels are categorized in up to 30 classes of deforestation risk. Forest pixels which belong to the class 0 (in green) are located farther than a distance of 780 m from the forest edge and have a negligible risk of being deforested.
#+RESULTS:
[[file:outputs_kenya/riskmap_ws37_ei.png]]

* Suggestions to improve the JNR methodology

With the current JNR methodology, we need to use historical deforestation rates for categories of risk to predict future deforestation. As a consequence, the JNR methodology is currently confounding "allocation" vs. "quantity" error (/sensu/ [cite/t:@Pontius2011]). Also, the need for slicing the continuous deforestation risk into 30 categories reduces the quality of the information provided by the deforestation risk map. Moreover, the categorization step, with the test of several algorithms (e.g. "Equal Area" and "Equal Interval" algorithms) adds complexity to the approach. Finally, using the JNR methodology, we don't know which pixels will be deforested exactly within the spatial cells. We only estimate a proportion of pixels to be deforested within each spatial cell based on historical deforestation rates. Consequently, it could be difficult to compute carbon emissions associated with projected deforestation, using a spatial map of forest carbon stocks as is usually done (e.g. [cite:@Santoro2021; @Vieilledent2013]).

As an alternative, we suggest to use the risk map with 10001 values (from 0 to 10000) obtained with the best moving window size, and including the zero category above a certain distance threshold, for predicting future deforestation. Also, because we are only interested in evaluating the performance of our model in predicting the *location* of the future deforestation, we suggest to fix the amount of deforestation for predictions on the validation period to the observed amount of deforestation for that period.

To do so, we first compute the deforestation on the validation period 2014--2018. The observed deforestation for 2014--2018 is 1,374,307 ha in Kenya.

#+begin_src python :results value :session :exports code
val = rmj.countpix(input_raster=fcc_file, value=2)
defor = round(val["area"])
f"The observed deforestation for 2014--2018 is: {defor} ha"
#+end_src

#+RESULTS:
: The observed deforestation for 2014--2018 is: 1374307 ha

Second, we project the deforestation on the validation period using the observed amount of deforestation for that period. Forest pixels with higher probabilities of deforestation are deforested first until reaching the correct amount of deforestation. We use the function =deforest()= that was added to the =riskmapjnr= Python package to perform this step.

#+begin_src python :results none :session :exports both
ifile = os.path.join(out_dir, "calval/ldefrate_with_zero_v_ws37.tif")
stats_rmj = rmj.deforest(
    input_raster=ifile,
    hectares=defor,
    output_file=os.path.join(out_dir, "fcc_proj_1418_rmj.tif"),
    blk_rows=128)
#+end_src

Finally, we can compare the predicted vs. observed map of forest cover change for the validation period using the same approach as the one suggested by the JNR methodology (using the wRMSE and spatial cells of given dimensions). To do so, we use the function =validation_fcc= that was added to the package.

#+begin_src python :results file :session :exports both
ofile = os.path.join(out_dir, "pred_obs_rmj.png")
rmj.validation_fcc(
    fcc_file=fcc_file,
    fcc_proj_file=os.path.join(out_dir, "fcc_proj_1418_rmj.tif"),
    csize=400,
    tab_file_pred=os.path.join(out_dir, "pred_obs_rmj.csv"),
    fig_file_pred=ofile,
    figsize=(6.4, 4.8),
    dpi=100, verbose=False)
ofile
#+end_src

#+NAME: fig:kenya-pred_obs_rmj
#+ATTR_LATEX: :width 0.8\linewidth :placement [H]
#+CAPTION: *Relationship between observed and predicted deforestation in 1 x 1 km grid cells using the alternative approach*. The red line is the identity line. Values of the weighted root mean squared error (wRMSE, in ha) and of the number of observations ($n$, the number of spatial cells) are reported on the graph.
#+RESULTS:
[[file:outputs_kenya/pred_obs_rmj.png]]

While the wRMSE is slightly higher with this approach (1133.4 ha against 1015.7 ha), we argue that this approach should be preferred to the one currently presented in the JNR methodology which do not allow identifying pixels which should be deforested in the future.

* Conclusion

We have presented the use of the =riskmapjnr= Python package to obtain a map of the deforestation risk following the JNR methodology. We have applied the JNR methodology to a small-scale study area (see first report to FAO) and to Kenya. As said previously, the JNR methodology is currently being discussed and will likely be subject to changes. The first results we obtained allow us to make some recommendations regarding how the JNR methodology could be improved. First, for the validation step, we suggest to fix the deforestation to the observed deforestation for the validation period to avoid "quantity" disagreement and focus on "allocation" error. Second, we suggest to use continuous values (or float values rescaled on the interval 1-10000), and not categories, to provide more accurate estimates of the deforestation risk. Other alternatives could also be considered and compared with the JNR approach such as using the Total Operating Characteristic to validate the risk map [cite:@Pontius2014], or following the methodology described in [cite/t:@Vieilledent2022-biorxiv], which uses the =forestatrisk= package [cite:@Vieilledent2021a] to estimate the spatial probability of deforestation based on a statistical model and various explanatory variables (including the distance to forest edge and the distance to previous deforestation). A comparison between the JNR approach and the =forestatrisk= approach is currently in progress.

* References

#+PRINT_BIBLIOGRAPHY:

* Environment setup and test                                       :noexport:

#+BEGIN_SRC python :results value
import sys
return(sys.executable)
#+END_SRC

#+RESULTS:
: /home/ghislain/.pyenv/versions/miniconda3-latest/envs/conda-rmj/bin/python

Local Variables:
eval: (pyvenv-activate (expand-file-name "~/.pyenv/versions/miniconda3-latest/envs/conda-rmj"))
End:

# End
