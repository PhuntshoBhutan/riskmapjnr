# -*- mode: org -*-
# -*- coding: utf-8 -*-
# -*- org-src-preserve-indentation: t; org-edit-src-content: 0; -*-
# ==============================================================================
# author          :Ghislain Vieilledent
# email           :ghislain.vieilledent@cirad.fr, ghislainv@gmail.com
# web             :https://ecology.ghislainv.fr
# license         :GPLv3
# ==============================================================================

#+title: Get Started
#+author:
# #+author: Ghislain Vieilledent
# #+email: ghislain.vieilledent@cirad.fr

#+LANGUAGE: en
#+TAGS: Blog(B) noexport(n) Stats(S)
#+TAGS: Ecology(E) R(R) OrgMode(O) Python(P)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS: H:3 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS: html-postamble:nil
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css"/>

# For math display
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage{unicode-math}

#+PROPERTY: header-args :eval never-export

* Version information    :noexport:

#+begin_src emacs-lisp -n :exports both
(princ (concat
        (format "Emacs version: %s\n"
                (emacs-version))
        (format "org version: %s\n"
                (org-version))))        
#+end_src

#+RESULTS:
: Emacs version: GNU Emacs 27.1 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.30, cairo version 1.16.0)
:  of 2021-11-27, modified by Debian
: org version: 9.5.3

* Introduction

** Importing Python modules

We import the Python modules needed for running the analysis.

#+begin_src python :results output :session :exports both
# Imports
import os
import pkg_resources

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from tabulate import tabulate

import riskmapjnr as rmj
#+end_src

#+RESULTS:

We create some directories to hold the data and the ouputs with the
function =rmj.make_dir()=.

#+begin_src python :results output :session :exports both
rmj.make_dir("outputs")
#+end_src

#+RESULTS:

We increase the cache for GDAL to increase computational speed.

#+begin_src python :results output :session :exports both
# GDAL
os.environ["GDAL_CACHEMAX"] = "1024"
#+end_src

#+RESULTS:

#+begin_src python :results output :session :exports both
os.environ["PROJ_LIB"] = "/home/ghislain/.pyenv/versions/miniconda3-latest/envs/conda-rmj/share/proj"
#+end_src

#+RESULTS:

** Forest cover change data

We use the Guadeloupe archipelago as a case study. Recent forest cover
change data for Guadeloupe is included in the ``riskmapjnr``
package. The raster file (``fcc123_GLP.tif``) includes the following
values: *1* for deforestation on the period 2000--2010, *2* for
deforestation on the period 2010--2020, and *3* for the remaining
forest in 2020. NoData value is set to *0*. This is the only data we
need to derive a map of deforestation risk following the JNR
methodology.

#+begin_src python :results output :session :exports both
fcc_file = pkg_resources.resource_filename("riskmapjnr", "data/fcc123_GLP.tif")
print(fcc_file)
#+end_src

#+RESULTS:
: /home/ghislain/Code/riskmapjnr/riskmapjnr/data/fcc123_GLP.tif

* Deforestation risk and distance to forest edge

The first step is to compute the distance to the forest edge after
which the risk of deforestation becomes negligible. Indeed, it is
known from previous studies on tropical deforestation that the
deforestation risk decreases rapidly with the distance to the forest
edge and that most of the deforestation occurs close to the forest
edge (Vieilledent et al., 2013, Grinand et al., 2020, Vieilledent,
2021, Dez√©cache et al., 2017). The VCS-JNR suggests identifying the
distance to the forest edge $d$, so that at least 99% of the
deforestation occurs within a distance $\leq d$. Forest areas located at
a distance from the forest edge $\gt d$ can be considered as having no
risk of being deforested. As a consequence, forest pixels with a
distance from the forest edge $\gt d$ are assigned category 0 (zero) for
the deforestation risk.

#+begin_src python :results file :session :exports both
ofile = "outputs/plot_dist.png"
rmj.dist_edge_threshold(input_file=fcc_file,
                        dist_file="outputs/dist_edge.tif",
                        tab_file="outputs/tab_dist.csv",
                        fig_file=ofile,
                        bins=np.arange(0, 1080, step=30),
                        blk_rows=128)
ofile
#+end_src

#+ATTR_RST: :width 600
#+RESULTS:
[[file:outputs/plot_dist.png]]

A table indicating the cumulative percentage of deforestation as a function of the distance is also produced:

#+begin_src python :results value raw :session :exports results
perc_df = pd.read_csv("outputs/tab_dist.csv", na_filter=False)
col_names = ["Distance", "Npixels", "Area", "Cumulation", "Percentage"]
tabulate(perc_df.head(10), headers=col_names, tablefmt="orgtbl", showindex=False)
#+end_src

#+RESULTS:
| Distance | Npixels |    Area | Cumulation | Percentage |
|----------+---------+---------+------------+------------|
|       30 |   25325 | 2279.25 |    2279.25 |    85.2263 |
|       60 |    3134 |  282.06 |    2561.31 |    95.7732 |
|       90 |     869 |   78.21 |    2639.52 |    98.6976 |
|      120 |     235 |   21.15 |    2660.67 |    99.4885 |
|      150 |      91 |    8.19 |    2668.86 |    99.7947 |
|      180 |      30 |     2.7 |    2671.56 |    99.8957 |
|      210 |      15 |    1.35 |    2672.91 |    99.9462 |
|      240 |       5 |    0.45 |    2673.36 |     99.963 |
|      270 |       2 |    0.18 |    2673.54 |    99.9697 |
|      300 |       2 |    0.18 |    2673.72 |    99.9764 |


* Environment setup and test :noexport:

#+BEGIN_SRC python :results value
import sys
return(sys.executable)
#+END_SRC

#+RESULTS:
: /home/ghislain/.pyenv/versions/miniconda3-latest/envs/conda-far/bin/python


These definitions are necessary for having babel use the correct
virtual environment.

Before using the anaconda python distribution I was a heavy user of python
virtualenv. I do not use this much any more, but these are the relevant
options:
- python-shell-virtualenv-path: only affects sessions via the run-python function
- org-babel-python-command: defines executable for non-session src blocks

# python-shell-virtualenv-path: "/home/dfeich/py-virtualenv/notebook"
# org-babel-python-command: "/home/dfeich/py-virtualenv/notebook/bin/python"

Local Variables:
org-babel-python-command: "/home/ghislain/.pyenv/versions/miniconda3-latest/envs/conda-rmj/bin/python"
org-babel-sh-command: "/bin/bash"
End:

